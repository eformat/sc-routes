{{- if .Values.deploymentConfig }}
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: {{ include "sc-routes.fullname" . }}
  labels:
    {{- include "sc-routes.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    {{- include "sc-routes.selectorLabels" . | nindent 4 }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8080'
        rollme: {{ randAlphaNum 5 | quote }}
      creationTimestamp: null
      labels:
        {{- include "sc-routes.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - env:
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  key: APIKEY
                  name: sc-routes
            - name: DEVID
              valueFrom:
                secretKeyRef:
                  key: DEVID
                  name: sc-routes
            - name: INFINISPAN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: INFINISPAN_PASSWORD
                  name: sc-routes
            - name: INFINISPAN_REALM
              valueFrom:
                secretKeyRef:
                  key: INFINISPAN_REALM
                  name: sc-routes
            - name: INFINISPAN_USER
              valueFrom:
                secretKeyRef:
                  key: INFINISPAN_USER
                  name: sc-routes
            - name: QUARKUS_PROFILE
              value: prod
          image: ''
          imagePullPolicy: Always
          name: {{ include "sc-routes.name" . }}
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
          - {{ include "sc-routes.name" . }}
        from:
          kind: ImageStreamTag
          name: {{ include "sc-routes.fullname" . }}:{{ .Values.image_version }}
        lastTriggeredImage: ""
      type: ImageChange
{{- end }}
